{"ast":null,"code":"var _jsxFileName = \"/home/john/personal/solana-learnings/frontend-app/src/App.js\",\n    _s = $RefreshSig$();\n\n//import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, AnchorProvider, web3 } from '@project-serum/anchor'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nlet baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\",\n  mode: \"cors\"\n};\n\nconst App = () => {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfwalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect();\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Download phantom wallet extension\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfwalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  const connectWallet = async () => {};\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 7\n  }, this);\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new AnchorProvider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 10\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendGif();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter gif link!\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 18\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 16\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 10\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), !walletAddress ? renderNotConnectedContainer() : renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","twitterLogo","idl","Connection","PublicKey","clusterApiUrl","Program","AnchorProvider","web3","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","mode","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfwalletIsConnected","solana","window","isPhantom","console","log","response","connect","publicKey","toString","alert","error","onLoad","addEventListener","removeEventListener","getGifList","provider","getProvider","program","account","fetch","connectWallet","sendGif","length","renderNotConnectedContainer","onInputChange","event","value","target","connection","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","renderConnectedContainer","preventDefault","map","item","index","gifLink"],"sources":["/home/john/personal/solana-learnings/frontend-app/src/App.js"],"sourcesContent":["//import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\n\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, AnchorProvider, web3 } from '@project-serum/anchor';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n    mode: \"cors\",\n}\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfwalletIsConnected = async () => {\n    try{\n        const  { solana } = window;\n        if(solana){\n            if(solana.isPhantom){\n                console.log(\"Phantom wallet found!\");\n                const response = await solana.connect();\n                console.log(\n                  'Connected with Public Key:',\n                  response.publicKey.toString()\n                );\n                setWalletAddress(response.publicKey.toString())\n            }\n        }\n        else{\n                alert(\"Download phantom wallet extension\")\n        }\n    } catch(error){\n        console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    const onLoad = async () => {\n        await checkIfwalletIsConnected();\n    }\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n\n  const connectWallet = async () => {};\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n    /*\n     * We want to render this UI when the user hasn't connected\n     * their wallet to our app yet.\n     */\n    const renderNotConnectedContainer = () => (\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        Connect to Wallet\n      </button>\n    );\n\n    const onInputChange = (event) => {\n      const { value } = event.target;\n      setInputValue(value);\n    };\n\n    const getProvider = () => {\n        const connection = new Connection(network, opts.preflightCommitment);\n        const provider = new AnchorProvider(\n          connection, window.solana, opts.preflightCommitment,\n        );\n      \treturn provider;\n    }\n\n    const createGifAccount = async () => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n        console.log(\"ping\")\n        await program.rpc.startStuffOff({\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n          signers: [baseAccount]\n        });\n        console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n        await getGifList();\n\n      } catch(error) {\n        console.log(\"Error creating BaseAccount account:\", error)\n      }\n    }\n\n   const renderConnectedContainer = () => {\n   // If we hit this, it means the program account hasn't been initialized.\n     if (gifList === null) {\n       return (\n         <div className=\"connected-container\">\n           <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n             Do One-Time Initialization For GIF Program Account\n           </button>\n         </div>\n       )\n     }\n   \t// Otherwise, we're good! Account exists. User can submit GIFs.\n   \telse {\n       return(\n         <div className=\"connected-container\">\n           <form\n             onSubmit={(event) => {\n               event.preventDefault();\n               sendGif();\n             }}\n           >\n             <input\n               type=\"text\"\n               placeholder=\"Enter gif link!\"\n               value={inputValue}\n               onChange={onInputChange}\n             />\n             <button type=\"submit\" className=\"cta-button submit-gif-button\">\n               Submit\n             </button>\n           </form>\n           <div className=\"gif-grid\">\n   \t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n             {gifList.map((item, index) => (\n               <div className=\"gif-item\" key={index}>\n                 <img src={item.gifLink} />\n               </div>\n             ))}\n           </div>\n         </div>\n       )\n     }\n   }\n\n  return (\n      <div className=\"App\">\n  \t\t\t{/* This was solely added for some styling fanciness */}\n  \t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n          <div className=\"header-container\">\n            <p className=\"header\">🖼 GIF Portal</p>\n            <p className=\"sub-text\">\n              View your GIF collection in the metaverse ✨\n            </p>\n            {/* Add the condition to show this only if we don't have a wallet address */}\n            {!walletAddress ? renderNotConnectedContainer() : renderConnectedContainer() }\n          </div>\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`built on @${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  export default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}