{"ast":null,"code":"var _jsxFileName = \"/home/john/personal/solana-learnings/frontend-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];\n\nconst App = () => {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n\n  const checkIfwalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect();\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Download phantom wallet extension\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfwalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const connectWallet = async () => {};\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendGif();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: TEST_GIFS.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)\n      }, gif, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), !walletAddress ? renderNotConnectedContainer() : renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"nRxuK6tVznkYxeVB/w8efvpafrU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useEffect","useState","twitterLogo","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","walletAddress","setWalletAddress","inputValue","setInputValue","checkIfwalletIsConnected","solana","window","isPhantom","console","log","response","connect","publicKey","toString","alert","error","onLoad","addEventListener","removeEventListener","connectWallet","sendGif","length","renderNotConnectedContainer","onInputChange","event","value","target","renderConnectedContainer","preventDefault","map","gif"],"sources":["/home/john/personal/solana-learnings/frontend-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n\n  const checkIfwalletIsConnected = async () => {\n    try{\n        const  { solana } = window;\n        if(solana){\n            if(solana.isPhantom){\n                console.log(\"Phantom wallet found!\");\n                const response = await solana.connect();\n                console.log(\n                  'Connected with Public Key:',\n                  response.publicKey.toString()\n                );\n                setWalletAddress(response.publicKey.toString())\n            }\n        }\n        else{\n                alert(\"Download phantom wallet extension\")\n        }\n    } catch(error){\n        console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    const onLoad = async () => {\n        await checkIfwalletIsConnected();\n    }\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const connectWallet = async () => {};\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n    /*\n     * We want to render this UI when the user hasn't connected\n     * their wallet to our app yet.\n     */\n    const renderNotConnectedContainer = () => (\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        Connect to Wallet\n      </button>\n    );\n\n    const onInputChange = (event) => {\n      const { value } = event.target;\n      setInputValue(value);\n    };\n\n    const renderConnectedContainer = () => (\n      <div className=\"connected-container\">\n        {/* Go ahead and add this input and button to start */}\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            sendGif();\n          }}\n        >\n          <input type=\"text\" placeholder=\"Enter gif link!\" value={inputValue} onChange={onInputChange} />\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n        </form>\n        <div className=\"gif-grid\">\n          {TEST_GIFS.map((gif) => (\n            <div className=\"gif-item\" key={gif}>\n              <img src={gif} alt={gif} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n\n  return (\n      <div className=\"App\">\n  \t\t\t{/* This was solely added for some styling fanciness */}\n  \t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n          <div className=\"header-container\">\n            <p className=\"header\">🖼 GIF Portal</p>\n            <p className=\"sub-text\">\n              View your GIF collection in the metaverse ✨\n            </p>\n            {/* Add the condition to show this only if we don't have a wallet address */}\n            {!walletAddress ? renderNotConnectedContainer() : renderConnectedContainer() }\n          </div>\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`built on @${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  export default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}