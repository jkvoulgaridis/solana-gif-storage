[{"/home/john/personal/solana-learnings/frontend-app/src/index.js":"1","/home/john/personal/solana-learnings/frontend-app/src/App.js":"2","/home/john/personal/solana-learnings/frontend-app/src/reportWebVitals.js":"3"},{"size":535,"mtime":1655130482758,"results":"4","hashOfConfig":"5"},{"size":6924,"mtime":1656527383448,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1655130482758,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"72qfl7",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/home/john/personal/solana-learnings/frontend-app/src/index.js",[],[],[],"/home/john/personal/solana-learnings/frontend-app/src/App.js",["19","20","21"],[],"//import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\n\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, AnchorProvider, web3 } from '@project-serum/anchor';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n}\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfwalletIsConnected = async () => {\n    try{\n        const  { solana } = window;\n        if(solana){\n            if(solana.isPhantom){\n                console.log(\"Phantom wallet found!\");\n                const response = await solana.connect();\n                console.log(\n                  'Connected with Public Key:',\n                  response.publicKey.toString()\n                );\n                setWalletAddress(response.publicKey.toString())\n            }\n        }\n        else{\n                alert(\"Download phantom wallet extension\")\n        }\n    } catch(error){\n        console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    const onLoad = async () => {\n        await checkIfwalletIsConnected();\n    }\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n\n const getProvider = () => {\n        const connection = new Connection(network, opts.preflightCommitment);\n        const provider = new AnchorProvider(\n          connection, window.solana, opts.preflightCommitment,\n        );\n        return provider;\n    }\n\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n\n  const connectWallet = async () => {};\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n    /*\n     * We want to render this UI when the user hasn't connected\n     * their wallet to our app yet.\n     */\n    const renderNotConnectedContainer = () => (\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        Connect to Wallet\n      </button>\n    );\n\n    const onInputChange = (event) => {\n      const { value } = event.target;\n      setInputValue(value);\n    };\n\n\n\n    const createGifAccount = async () => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n        console.log(\"ping\")\n        await program.rpc.startStuffOff({\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n          signers: [baseAccount]\n        });\n        console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n        await getGifList();\n\n      } catch(error) {\n        console.log(\"Error creating BaseAccount account:\", error)\n      }\n    }\n\n   const renderConnectedContainer = () => {\n   // If we hit this, it means the program account hasn't been initialized.\n     if (gifList === null) {\n       return (\n         <div className=\"connected-container\">\n           <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n             Do One-Time Initialization For GIF Program Account\n           </button>\n         </div>\n       )\n     }\n   \t// Otherwise, we're good! Account exists. User can submit GIFs.\n   \telse {\n       return(\n         <div className=\"connected-container\">\n           <form\n             onSubmit={(event) => {\n               event.preventDefault();\n               sendGif();\n             }}\n           >\n             <input\n               type=\"text\"\n               placeholder=\"Enter gif link!\"\n               value={inputValue}\n               onChange={onInputChange}\n             />\n             <button type=\"submit\" className=\"cta-button submit-gif-button\">\n               Submit\n             </button>\n           </form>\n           <div className=\"gif-grid\">\n   \t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n             {gifList.map((item, index) => (\n               <div className=\"gif-item\" key={index}>\n                 <img src={item.gifLink} />\n               </div>\n             ))}\n           </div>\n         </div>\n       )\n     }\n   }\n\n  return (\n      <div className=\"App\">\n  \t\t\t{/* This was solely added for some styling fanciness */}\n  \t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n          <div className=\"header-container\">\n            <p className=\"header\">ðŸ–¼ GIF Portal</p>\n            <p className=\"sub-text\">\n              View your GIF collection in the metaverse âœ¨\n            </p>\n            {/* Add the condition to show this only if we don't have a wallet address */}\n            {!walletAddress ? renderNotConnectedContainer() : renderConnectedContainer() }\n          </div>\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`built on @${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  export default App;","/home/john/personal/solana-learnings/frontend-app/src/reportWebVitals.js",[],[],{"ruleId":"22","severity":1,"message":"23","line":13,"column":7,"nodeType":"24","messageId":"25","endLine":13,"endColumn":16},{"ruleId":"26","severity":1,"message":"27","line":101,"column":6,"nodeType":"28","endLine":101,"endColumn":21,"suggestions":"29"},{"ruleId":"30","severity":1,"message":"31","line":192,"column":18,"nodeType":"32","endLine":192,"endColumn":44},"no-unused-vars","'TEST_GIFS' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getGifList'. Either include it or remove the dependency array.","ArrayExpression",["33"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"34","fix":"35"},"Update the dependencies array to be: [getGifList, walletAddress]",{"range":"36","text":"37"},[3125,3140],"[getGifList, walletAddress]"]